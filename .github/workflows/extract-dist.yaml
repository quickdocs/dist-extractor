name: Extract Quicklisp dist data

on:
  push:
  schedule:
    - cron: '0 */6 * * *'

jobs:
  extract:
    name: Extract data
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      - name: Set up gcloud Cloud SDK environment
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      - name: Build Docker image
        run: |
          make docker_image
      - name: Push Docker image
        if: github.ref == 'refs/heads/master'
        run: |
          image_name=ghcr.io/quickdocs/quicklisp-dist-all
          version=$(docker images ghcr.io/quickdocs/quicklisp-dist-all | tail -n +2 | head -n 1 | awk '{ print $2 }')
          docker push "$image_name:$version"
      - name: Extract the dist data
        env:
          BUCKET_BASE_URL: https://storage.googleapis.com/quickdocs-dist
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "$GITHUB_EVENT_NAME" == "push" ]; then
            EXTRACT_ALL=1
          fi
          version=$(make version)
          if [ ! $EXTRACT_ALL ] && [ "$version" = "$(make quicklisp_version)" ]; then
            echo "No updates until the version '$version'."
          else
            # Create a deployment
            make -s github_deployment > >(tee github_deployment)
            deployment_id=$(cat github_deployment | jq -r '.id')
            if [ $? -ne 0 ]; then
              echo "Failed to create a deployment"
              exit 1
            fi
            echo "Deployment ID: $deployment_id"
            # Change the deployment status to 'in_progress'
            github_run_url="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/runs/$GITHUB_RUN_ID"
            make github_deployment_status \
              deployment_id=$(cat github_deployment_id) \
              description="Extracting version '$version'" \
              state=in_progress \
              log_url=$github_run_url
            # Extract
            make generate-index extract EXTRACT_ALL=${EXTRACT_ALL}
          fi
      - name: Upload to GCS
        if: github.ref == 'refs/heads/master'
        run: |
          if [ -d ./output ]; then
            github_run_url="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/runs/$GITHUB_RUN_ID"
            deployment_id=$(cat github_deployment | jq -r '.id')
            make github_deployment_status \
              deployment_id=$deployment_id \
              description="Uploading version '$version'" \
              state=in_progress \
              log_url=$github_run_url
            make upload
            make github_deployment_status \
              deployment_id=$deployment_id \
              description="Successfully extracted version '$version'" \
              state=success \
              log_url=$github_run_url
          fi
